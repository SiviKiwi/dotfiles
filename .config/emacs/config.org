#+TITLE: Sivert's heilage emacs konfig
#+AUTHOR: Sivert

* Ytelse
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb


  (add-hook 'after-init-hook #'(lambda ()
                                 ;; restore after startup
                                 (setq gc-cons-threshold 800000)))

#+end_src

* Handering av pakkar
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (unless package--initialized (package-initialize))

  ;;; Setup use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)

  (use-package diminish)

#+end_src

* Utsjånad
#+begin_src emacs-lisp
  (if (fboundp 'menu-bar-mode)
      (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))

  (setq-default cursor-type 'bar)

  (setq initial-scratch-message "")
  (setq-default frame-title-format '("%b"))
  (setq linum-format "%4d ")

  (use-package undo-tree
    :diminish
    :init (global-undo-tree-mode)
    :config (setq-default undo-tree-auto-save-history nil))
  (add-hook 'before-save-hook
            'delete-trailing-whitespace)
#+end_src

** Tema
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Jetbrains mono" :height 160)
  (load-theme 'modus-operandi)
#+end_src

* Forbetring av livskvalitet

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
  (fset 'yes-or-no-p 'y-or-n-p)
  (show-paren-mode 1)
  (delete-selection-mode 1)
  (setq linum-format "%4d ")

  (use-package which-key
      :diminish
      :config
      (which-key-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package ace-window
    :bind ("M-o" . ace-window)
          ("M-O" . ace-swap-window))
#+end_src

#+begin_src emacs-lisp
  (use-package workgroups2
    :config
    (workgroups-mode 1))

#+end_src

** Åpne filar som administrator
#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src
** Forhindre rot i filer
#+begin_src emacs-lisp
  ;;; Offload the custom-set-variables to a separate file
  ;;; This keeps your init.el neater and you have the option
  ;;; to gitignore your custom.el if you see fit.
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
  ;;; Load custom file. Don't hide errors. Hide success message
  (load custom-file nil t)

  ;;; Put Emacs auto-save and backup files to /tmp/ or C:/Temp/
  (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
  (setq
   backup-by-copying t                                        ; Avoid symlinks
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   auto-save-list-file-prefix emacs-tmp-dir
   auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t))  ; Change autosave dir to tmp
   backup-directory-alist `((".*" . ,emacs-tmp-dir)))

  ;;; Lockfiles unfortunately cause more pain than benefit
  (setq create-lockfiles nil)

  ;;; Load wheatgrass as the default theme if one is not loaded already

  (if (not custom-enabled-themes)
      (load-theme 'wheatgrass t))
#+end_src

* IVY (Counsel)
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :diminish
    :config (counsel-mode))

  (use-package ivy
    :diminish
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))


#+end_src


* Programmering

#+begin_src emacs-lisp
  (use-package eldoc
    :init
    (global-eldoc-mode))

  (use-package eglot
    :hook (prog-mode . eglot-ensure)
    :init
    (setq eglot-stay-out-of '(nflymake))
    :bind (:map
           eglot-mode-map
           ("C-c c a" . eglot-code-actions)
           ("C-c c o" . eglot-code-actions-organize-imports)
           ("C-c c r" . eglot-rename)
           ("C-c c f" . eglot-format)))

  (use-package flymake
    :hook (prog-mode . flymake-mode)
    :bind (:map flymake-mode-map
                ("C-c ! n" . flymake-goto-next-error)
                ("C-c ! p" . flymake-goto-prev-error)
                ("C-c ! l" . flymake-show-buffer-diagnostics)))

#+end_src

** C/C++
#+begin_src emacs-lisp
(use-package platformio-mode
  :hook (c-mode .
          (lambda()
            (platformio-conditionally-enable))))
#+end_src

* Org-mode, elsklingen min
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda() (electric-indent-local-mode -1)))

  (use-package toc-org
    :commands toc-org-enable
    :init
    (add-hook 'org-mode-hook 'toc-org-enable)
    (add-hook 'org-mode-hook 'org-indent-mode))

  (eval-after-load 'org-indent '(diminish 'org-indent-mode))

  (require 'org-tempo)

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
  (setq org-pretty-entities t)

  (add-to-list 'org-latex-packages-alist '("" "minted" nil))
  (setq org-latex-src-block-backend 'minted)

  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (add-to-list 'org-latex-packages-alist '("" "xcolor"))



#+end_src
** babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (python . t)
     (octave . t)))

  ; Ikkje spør før evaluering
  (setq org-confirm-babel-evaluate nil)

#+end_src

* Dokument
** EPUB
#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode))

#+end_src
** PDF
#+begin_src emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install :no-query))
#+end_src

* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src
* Radio
#+begin_src emacs-lisp
  (use-package emms
    :config
    (if (executable-find "mpv")
      (setq emms-player-list '(emms-player-mpv))
      (emms-default-players)))
#+end_src
